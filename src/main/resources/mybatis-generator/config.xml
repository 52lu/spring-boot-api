<?xml version="1.0" encoding="UTF-8" ?>
<!--mybatis的代码生成器相关配置-->
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- 引入配置文件 -->
    <!-- 配置文件在: /src/main/resources/mybatis-generator/generatorjdbc.properties -->
    <properties resource="mybatis-generator/generatorjdbc.properties"/>
    <!--
    1.一个数据库一个context
    2.context的子元素必须按照它给出的顺序:
        property*,plugin*,commentGenerator?,jdbcConnection,javaTypeResolver?,
        javaModelGenerator,sqlMapGenerator?,javaClientGenerator?,table+
    -->
    <!--
     id : 随便填，保证多个 context id 不重复就行
     defaultModelType ： 可以不填，默认值 conditional，flat表示一张表对应一个po
     targetRuntime：可以不填，默认值 MyBatis3，常用的还有 MyBatis3Simple，这个配置会影响生成的 dao 和 mapper.xml的内容
     -->
    <context id="myContext" targetRuntime="MyBatis3" defaultModelType="flat">

        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
   一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
        <property name="autoDelimitKeywords" value="true"/>

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="utf-8"/>

        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- *************************************** 插件开始部分 ****************************************************-->
        <!-- JavaBean 实现 序列化 接口 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- generator 时,为类生成toString -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>

        <!-- 提供clientSuffix、exampleSuffix、modelSuffix来修改对应生成的类和文件的结尾 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.TableRenameConfigurationPlugin">
            <!-- TbMapper -> TbDao, TbMapper.xml -> TbDao.xml -->
            <property name="clientSuffix" value="Dao"/>
            <!--  发现如果使用这个修改example后缀后，指定example类目录的插件就会失效-->
            <property name="exampleSuffix" value="Query"/>
            <!-- 实体类添加后缀-->
            <property name="modelSuffix" value="Entity"/>
        </plugin>

        <!-- Table重命名插件 -->
        <!-- 去掉表前缀，解决:micro_user_information 去除后生成 UserinformationModel问题-->
        <plugin type="com.itfsw.mybatis.generator.plugins.TableRenamePlugin">
            <!-- 可根据具体需求确定是否配置 -->
            <property name="searchString" value="^${table.pre}"/>
            <property name="replaceString" value=""/>
        </plugin>
        <!-- Example Criteria 增强插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.ExampleTargetPlugin">
            <!-- 修改Example类生成到目标包下 -->
            <property name="targetPackage" value="${package.name}.model.dao.example"/>
        </plugin>

        <!-- 自定义注释插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.CommentPlugin">
            <!-- 自定义模板路径 -->
            <property name="template" value="${mybatis.comment.file}"/>
        </plugin>
        <!-- Lombok插件 去除模型中的get和set ,用@Data注解取代 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.LombokPlugin">
            <!-- @Data 默认开启,同时插件会对子类自动附加@EqualsAndHashCode(callSuper = true)，@ToString(callSuper = true) -->
            <property name="@Data" value="true"/>
            <!-- @Builder 必须在 Lombok 版本 >= 1.18.2 的情况下开启，对存在继承关系的类自动替换成@SuperBuilder -->
            <property name="@Builder" value="false"/>
            <!-- @NoArgsConstructor 和 @AllArgsConstructor 使用规则和Lombok一致 -->
            <property name="@AllArgsConstructor" value="false"/>
            <property name="@NoArgsConstructor" value="false"/>
            <!-- @Getter、@Setter、@Accessors 等使用规则参见官方文档 -->
            <property name="@Accessors(chain = true)" value="false"/>
            <!-- 临时解决IDEA工具对@SuperBuilder的不支持问题，开启后(默认未开启)插件在遇到@SuperBuilder注解时会调用ModelBuilderPlugin来生成相应的builder代码 -->
            <property name="supportSuperBuilderForIdea" value="false"/>
        </plugin>
        <!-- *************************************** 插件结束部分 ****************************************************-->


        <!-- 注释 -->
        <commentGenerator>
            <!-- 是否取消注释 true:否 false:是 -->
            <property name="suppressAllComments" value="false"/>
            <!-- 是否生成注释代时间戳 -->
            <property name="suppressDate" value="false"/>
            <!-- 生成时间的格式-->
            <property name="dateFormat" value="yyyy-MM-dd HH:mm:ss "/>
            <!-- 是否带上数据库字段备注信息，只有suppressAllComments为false时才生效-->
            <property name="addRemarkComments" value="true"/>
        </commentGenerator>


        <!-- jdbc连接 -->
        <jdbcConnection driverClass="${spring.datasource.driverClassName}"
                        connectionURL="${spring.datasource.url}"
                        userId="${spring.datasource.username}"
                        password="${spring.datasource.password}">
            <!--高版本的 mysql-connector-java 需要设置 nullCatalogMeansCurrent=true-->
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>

        <!-- 类型转换 -->
        <javaTypeResolver>
            <!--是否使用bigDecimal，默认false。
                false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer
                true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal-->
            <property name="forceBigDecimals" value="true"/>
            <!--是否使用转换日期，默认false
                false，将所有 JDBC 的时间类型解析为 java.util.Date
                true，将 JDBC 的时间类型按如下规则解析
                    DATE	                -> java.time.LocalDate
                    TIME	                -> java.time.LocalTime
                    TIMESTAMP               -> java.time.LocalDateTime
                    TIME_WITH_TIMEZONE  	-> java.time.OffsetTime
                    TIMESTAMP_WITH_TIMEZONE	-> java.time.OffsetDateTime
                -->
            <!--<property name="useJSR310Types" value="false"/>-->
        </javaTypeResolver>

        <!-- 生成实体类地址 -->
        <javaModelGenerator targetPackage="${package.name}.model.entity" targetProject="src/main/java">
            <!-- 是否允许子包，默认为false -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否针对string类型的字段在set方法中进行修剪，默认false -->
            <property name="trimStrings" value="true"/>
            <!-- 建立modal对象是否不可改变 即生成的modal对象不会有setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
            <!-- 是否对modal添加构造函数 -->
            <property name="constructorBased" value="true"/>
        </javaModelGenerator>

        <!-- 生成Mapper.xml文件 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <!--<property name="enableSubPackages" value="false"/>-->
        </sqlMapGenerator>

        <!-- 生成 XxxMapper.java 接口-->
        <javaClientGenerator targetPackage="${package.name}.model.dao" targetProject="src/main/java" type="XMLMAPPER">
            <!--<property name="enableSubPackages" value="false"/>-->
        </javaClientGenerator>

        <!--
          1.table可以有多个,
          2.每个数据库中的表都可以写一个table
          3.tableName可以使用%通配符来匹配所有数据库表,也可以指定具体的表明
          4.只有匹配的表才会自动生成文件
         -->
        <!--
         schema为数据库名，oracle需要配置，mysql不需要配置。
         tableName为对应的数据库表名
         domainObjectName 是要生成的实体类名(可以不指定，默认按帕斯卡命名法将表名转换成类名)
         enableXXXByExample 默认为 true， 为 true 会生成一个对应Example帮助类，帮助你进行条件查询，不想要可以设为false
        -->
        <!--使用%通配符来匹配-->
        <table tableName="%" enableCountByExample="true" enableUpdateByExample="true" enableDeleteByExample="true"
               enableSelectByExample="true" selectByExampleQueryId="true">
            <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如create_time，生成的属性名字就是create_time,而不会是createTime -->
            <property name="useActualColumnNames" value="false"/>
            <!-- 数据库表主键 -->
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
            <!-- 这里虽然能去掉表前缀，但是针对:micro_user_information 去除后生成 UserinformationModel-->
            <!--            <domainObjectRenamingRule searchString="^Micro" replaceString=""/>-->
            <!-- 去掉表前缀-->

        </table>

        <!--        &lt;!&ndash;使用具体表生成&ndash;&gt;-->
        <!--        <table tableName="micro_student_subject" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false"-->
        <!--               enableSelectByExample="false" selectByExampleQueryId="true">-->
        <!--            &lt;!&ndash; 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如create_time，生成的属性名字就是create_time,而不会是createTime &ndash;&gt;-->
        <!--            <property name="useActualColumnNames" value="false"/>-->
        <!--            &lt;!&ndash; 数据库表主键 &ndash;&gt;-->
        <!--            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>-->
        <!--        </table>-->
    </context>
</generatorConfiguration>
